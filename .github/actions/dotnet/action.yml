--- # Build and deploy packages
name: 'Build Dotnet'
description: 'Builds and deploys the source'
inputs:
  # NUGET
  NUGET_ADDITIONAL_RESTORE_FEED:
    description: 'Any additional nuget feed to download packages from'
    required: false
  NUGET_PACK:
    description: 'Whether to pack packages with feeds'
    required: false
  NUGET_FEED:
    description: 'Nuget feed to push packages to'
    required: false
  NUGET_API_KEY:
    description: 'API key to authenticate when pushing packages'
    required: false

  # General
  BUILD_VERSION:
    description: 'Build version'
    required: true

  RELEASE_NOTES:
    description: 'Release notes'
    required: false

  BUILD_SQL:
    description: 'Whether to build SQL DB'
    required: true

  # Octopus
  OCTOPUS_DEPLOY_PACKAGE:
    description: 'Package (root) to deploy'
    required: false
  OCTOPUS_DEPLOY_PACKAGE_ZIP:
    description: 'Package (root) to deploy when zipped'
    required: false

runs:
  using: "composite"
  steps:

  ############################################################################################################
  # DOTNET BUILD
  ############################################################################################################
  - if: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED != ''}}
    name: "Dotnet: Add optional nuget feed"
    shell: bash
    run: dotnet nuget add source --name Additional1 "${{inputs.NUGET_ADDITIONAL_RESTORE_FEED}}"

  - name: "Dotnet: Setup package cache"
    uses: actions/cache@v3
    with:
      path: ~/.nuget/packages
      key: ${{runner.os}}-nuget-${{hashFiles('**/*.sln', '**/*.csproj', '**/*.props')}}
      restore-keys: |
        ${{runner.os}}-nuget-

  - name: "Dotnet: Stop build server for clean build"
    working-directory: ${{github.workspace}}/src
    shell: bash
    run: dotnet build-server shutdown && echo "Build server closed" || echo "Failed to shutdown build server"
    env:
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"

  - name: "Dotnet: Restore packages"
    working-directory: ${{github.workspace}}/src
    shell: bash
    run: dotnet restore
    env:
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"

  - name: "Dotnet: Build"
    working-directory: ${{github.workspace}}/src
    shell: bash
    run: dotnet build --no-restore --configuration Release "/p:Version=${{inputs.BUILD_VERSION}}"
    env:
      ReleaseNotes: ${{inputs.RELEASE_NOTES}}
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"

  ## RUN TESTS
  - name: "Dotnet: Test"
    working-directory: ${{github.workspace}}/src
    shell: bash
    run: dotnet test --no-build --no-restore -noConsoleLogger --configuration Release "/p:Version=${{inputs.BUILD_VERSION}}" --filter FullyQualifiedName\!~Integration --logger:"trx;LogFilePrefix=testResults" --results-directory ../test-results
    env:
      ReleaseNotes: ${{inputs.RELEASE_NOTES}}
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"

  # ############################################################################################################
  # # DATABASE BUILD
  # ############################################################################################################
  - if: ${{inputs.BUILD_SQL == 'true'}}
    name: "SQL: Install TSQLLint"
    shell: bash
    run: dotnet tool install --local TSQLLint
    env:
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"

  - if: ${{inputs.BUILD_SQL == 'true'}}
    name: "SQL: Lint SQL Files"
    shell: bash
    run: dotnet tsqllint "${{github.workspace}}/db"
    env:
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"

  - if: ${{inputs.BUILD_SQL == 'true'}}
    name: "SQL: Get SQL Compare"
    shell: bash
    run: docker pull redgate/sqlcompare:latest

  - if: ${{inputs.BUILD_SQL == 'true'}}
    name: "SQL: Build SQL change"
    shell: bash
    run: docker run "-v$GITHUB_WORKSPACE:$GITHUB_WORKSPACE" --net=host --rm redgate/sqlcompare:latest /IAgreeToTheEULA /filter:"$DB_FILTER" /options:ConsiderNextFilegroupInPartitionSchemes,DecryptPost2kEncryptedObjects,DoNotOutputCommentHeader,ForceColumnOrder,IgnoreCertificatesAndCryptoKeys,IgnoreDatabaseAndServerName,IgnoreUserProperties,IgnoreUsersPermissionsAndRoleMemberships,IgnoreWhiteSpace,IgnoreWithElementOrder,IncludeDependencies,NoDeploymentLogging,ThrowOnFileParseFailed,UseCompatibilityLevel /transactionIsolationLevel:SERIALIZABLE /include:staticData /scriptFile:"$DB_OUTPUT" /scripts1:"$DB_SOURCE" /showWarnings /include:Identical /report:"$DB_REPORT" /reportType:Xml /force /OutputWidth:1024 /out:"$DB_LOG" /empty2
    env:
      DB_SOURCE: ${{github.workspace}}/db
      DB_OUTPUT: ${{github.workspace}}/update.sql
      DB_LOG: ${{github.workspace}}/update.log
      DB_REPORT: ${{github.workspace}}/update.xml
      DB_FILTER: ${{github.workspace}}/db/Filter.scpf

  - if: ${{inputs.BUILD_SQL == 'true' && inputs.OCTOPUS_DEPLOY_PACKAGE != ''}}
    name: "SQL: Zip DB for Octopus"
    working-directory: ${{github.workspace}}/db
    shell: bash
    run: |
      mkdir -p ../package/db/state
      cp -R -- * ../package/db/state
      cd ../package
      zip -9r "${{github.workspace}}/${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-database.${{inputs.BUILD_VERSION}}.zip" .

  ############################################################################################################
  # Publish ready for deploy to octopus
  ############################################################################################################
  - if: ${{inputs.OCTOPUS_DEPLOY_PACKAGE != ''}}
    name: "Dotnet: Pack Packages for Octopus (win-x64)"
    working-directory: ${{github.workspace}}/src/${{inputs.OCTOPUS_DEPLOY_PACKAGE}}
    shell: bash
    run: dotnet publish -warnaserror -p:PublishSingleFile=true --configuration:Release -r:win-x64 --self-contained -p:NoWarn=NETSDK1179 -p:PublishAot=false -p:PublishReadyToRun=False -p:PublishReadyToRunShowWarnings=True -p:PublishTrimmed=False -p:DisableSwagger=False -p:TreatWarningsAsErrors=True "-p:Version=${{inputs.BUILD_VERSION}}" -p:IncludeNativeLibrariesForSelfExtract=false -p:SolutionDir=..\\ --output ../server-dist/win-x64
    env:
      ReleaseNotes: ${{inputs.RELEASE_NOTES}}
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"

  - if: ${{inputs.OCTOPUS_DEPLOY_PACKAGE != ''}}
    name: "Dotnet: Pack Packages for Octopus (linux-x64)"
    working-directory: ${{github.workspace}}/src/${{inputs.OCTOPUS_DEPLOY_PACKAGE}}
    shell: bash
    run: dotnet publish -warnaserror -p:PublishSingleFile=true --configuration:Release -r:linux-x64 --self-contained -p:NoWarn=NETSDK1179 -p:PublishAot=false -p:PublishReadyToRun=False -p:PublishReadyToRunShowWarnings=True -p:PublishTrimmed=False -p:DisableSwagger=False -p:TreatWarningsAsErrors=True "-p:Version=${{inputs.BUILD_VERSION}}" -p:IncludeNativeLibrariesForSelfExtract=false -p:SolutionDir=..\\ --output ../server-dist/linux-x64
    env:
      ReleaseNotes: ${{inputs.RELEASE_NOTES}}
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"

  - if: ${{inputs.OCTOPUS_DEPLOY_PACKAGE != ''}}
    name: "Dotnet: Pack Packages for Octopus (linux-arm64)"
    working-directory: ${{github.workspace}}/src/${{inputs.OCTOPUS_DEPLOY_PACKAGE}}
    shell: bash
    run: dotnet publish -warnaserror -p:PublishSingleFile=true --configuration:Release -r:linux-arm64 --self-contained -p:NoWarn=NETSDK1179 -p:PublishAot=false -p:PublishReadyToRun=False -p:PublishReadyToRunShowWarnings=True -p:PublishTrimmed=False -p:DisableSwagger=False -p:TreatWarningsAsErrors=True "-p:Version=${{inputs.BUILD_VERSION}}" -p:IncludeNativeLibrariesForSelfExtract=false -p:SolutionDir=..\\ --output ../server-dist/linux-arm64
    env:
      ReleaseNotes: ${{inputs.RELEASE_NOTES}}
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"

  - if: ${{inputs.OCTOPUS_DEPLOY_PACKAGE != ''}}
    name: "Dotnet: Zip Packages for Octopus (win-x64)"
    working-directory: ${{github.workspace}}/src/server-dist/win-x64
    shell: bash
    run: zip -9r "${{github.workspace}}/${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-win-x64.${{inputs.BUILD_VERSION}}.zip" . -x -- *.pdb
  
  - if: ${{inputs.OCTOPUS_DEPLOY_PACKAGE != ''}}
    name: "Dotnet: Zip Packages for Octopus (linux-x64)"
    working-directory: ${{github.workspace}}/src/server-dist/linux-x64
    shell: bash
    run: zip -9r "${{github.workspace}}/${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-x64.${{inputs.BUILD_VERSION}}.zip" . -x -- *.pdb

  - if: ${{inputs.OCTOPUS_DEPLOY_PACKAGE != ''}}
    name: "Dotnet: Zip Packages for Octopus (linux-arm64)"
    working-directory: ${{github.workspace}}/src/server-dist/linux-arm64
    shell: bash
    run: zip -9r "${{github.workspace}}/${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-arm64.${{inputs.BUILD_VERSION}}.zip" . -x -- *.pdb

  ############################################################################################################
  # DOTNET PUSH TO NUGET
  ############################################################################################################
  - if: ${{inputs.NUGET_API_KEY != '' && inputs.NUGET_PACK == 'true'}}
    name: "Dotnet: Pack tool"
    working-directory: ${{github.workspace}}/src
    shell: bash
    run: dotnet pack --configuration Release "/p:Version=${{inputs.BUILD_VERSION}}" --no-restore
    env:
      ReleaseNotes: ${{inputs.RELEASE_NOTES}}
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"

  - if: ${{inputs.NUGET_API_KEY != '' && inputs.NUGET_PACK == 'true'}}
    name: "Dotnet: Copy packed to dist"
    shell: bash
    run:  |
      shopt -s globstar
      [ ! -d ../dist ] && mkdir ../dist
      cp **/*.nupkg ../dist
    working-directory: ${{github.workspace}}/src        

  - if: ${{inputs.NUGET_API_KEY != '' && inputs.NUGET_PACK == 'true'}}
    name: "Dotnet: Publish Packages to Nuget"
    shell: bash
    run: dotnet pushpackages -folder dist --api-key "${{inputs.NUGET_API_KEY}}" --source "${{inputs.NUGET_FEED}}"
    env:
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"

